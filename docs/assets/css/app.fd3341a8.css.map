{"version":3,"sources":["webpack:///src/components/src/components/MenuBar.vue","app.fd3341a8.css","webpack:///src/src/App.vue","webpack:///src/components/src/components/NewItemForm.vue","webpack:///src/views/src/views/Backlog.vue","webpack:///src/components/src/components/TaskLaneItem.vue","webpack:///src/components/src/components/TaskLane.vue"],"names":[],"mappings":"AAyBA,SACA,kBCvBA,CCsBA,gBACA,eDlBA,CEuBA,gBACA,YAAA,CACA,QAAA,CACA,0CAAA,CACA,UAAA,CACA,2BAAA,CAAA,mBAAA,CACA,kBAAA,CACA,UFlBA,CEoBA,sBACA,wBFlBA,CG6CA,MACA,kBHzCA,CG4CA,iBACA,kBH1CA,CG6CA,YACA,YH3CA,CG8CA,UACA,aH5CA,CIlBA,qBACA,kBJsBA,CKOA,aACA,eLHA","file":"app.fd3341a8.css","sourcesContent":["<template>\n  <div class=\"menubar\">\n    <div class=\"btn-group\" role=\"group\" aria-label=\"Menu bar\">\n      <router-link to=\"/board\" :class=\"buttonClass('/board')\">Board</router-link>\n      <router-link to=\"/backlog\" :class=\"buttonClass('/backlog')\">Backlog</router-link>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MenuBar',\n  methods: {\n    buttonClass(path) {\n      return {\n        btn: true,\n        'btn-primary': this.$route.path === path,\n        'btn-secondary': this.$route.path !== path,\n      };\n    },\n  },\n};\n</script>\n\n<style>\n  .menubar {\n    margin-bottom: 16px;\n  }\n</style>\n","\n.menubar {\n  margin-bottom: 16px;\n}\n\n\n.page-header h1 {\n  font-weight: 300;\n}\n\n\n.add-item input {\n  outline: none;\n  border: 0;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.5);\n  width: 100%;\n  -webkit-transition: all 0.25s;\n  transition: all 0.25s;\n  background: inherit;\n  color: white;\n}\n.add-item input:focus {\n  border-bottom-color: rgba(255, 255, 255, 1);\n}\n\n\n.card {\n  margin-bottom: 10px;\n}\n.card:last-child {\n  margin-bottom: 25px;\n}\n.card-block {\n  padding: 15px;\n}\n.add-item {\n  margin: 30px 0;\n}\n\n\n.card.task-lane-item {\n  background: #627180;\n}\n\n\n.card-body > * {\n  min-height: 50px;\n}\n\n\n/*# sourceMappingURL=app.fd3341a8.css.map*/","<template>\n  <div id=\"app\">\n    <div class=\"page-header\">\n      <h1>Kanban Board</h1>\n      <p class=\"lead\">An example of a Kanban board, written in Vue.js</p>\n    </div>\n\n    <menu-bar></menu-bar>\n\n    <router-view/>\n  </div>\n</template>\n\n<script>\nimport MenuBar from \"@/components/MenuBar\";\n\nexport default {\n  name: \"app\",\n  components: {\n    \"menu-bar\": MenuBar\n  }\n};\n</script>\n\n<style>\n.page-header h1 {\n  font-weight: 300;\n}\n</style>\n","<template>\n  <div class=\"add-item\">\n    <form action=\"#\" method=\"post\" v-on:submit.prevent=\"submitForm\">\n      <input type=\"text\" v-model=\"itemText\" placeholder=\"Add something to the backlog.\">\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'NewItemForm',\n  data() {\n    return {\n      itemText: '',\n    };\n  },\n  methods: {\n    submitForm() {\n      if (this.itemText) {\n        this.$store.commit('addItem', {\n          text: this.itemText,\n        });\n\n        this.itemText = '';\n      }\n    },\n  },\n};\n</script>\n\n<style>\n.add-item input {\n  outline: none;\n  border: 0;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.5);\n  width: 100%;\n  transition: all 0.25s;\n  background: inherit;\n  color: white;\n}\n.add-item input:focus {\n  border-bottom-color: rgba(255, 255, 255, 1);\n}\n</style>\n","<template>\n  <div class=\"backlog-view\">\n    <new-item></new-item>\n\n    <div class=\"card\" v-for=\"item in items\" :key=\"item.id\">\n      <div class=\"card-block\">\n        <h5 class=\"card-title\">\n          <span class=\"text-muted\">#{{item.id}}</span>\n          {{item.text}}\n          <span :class=\"badgeClass(item)\">{{badgeText(item)}}</span>\n        </h5>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport NewItemForm from \"@/components/NewItemForm\";\n\nconst badgeDetail = {\n  todo: {\n    text: \"todo\",\n    class: \"badge badge-light\"\n  },\n\n  inProgress: {\n    text: \"in progress\",\n    class: \"badge badge-info\"\n  },\n\n  done: {\n    text: \"done\",\n    class: \"badge badge-success\"\n  }\n};\n\nexport default {\n  name: \"Backlog\",\n  components: {\n    \"new-item\": NewItemForm\n  },\n  methods: {\n    itemLane(item) {\n      if (this.$store.state.items.todo.includes(item)) {\n        return \"todo\";\n      } else if (this.$store.state.items.inProgress.includes(item)) {\n        return \"inProgress\";\n      }\n\n      return \"done\";\n    },\n    badgeText(item) {\n      const lane = this.itemLane(item);\n      return badgeDetail[lane].text;\n    },\n    badgeClass(item) {\n      const lane = this.itemLane(item);\n      return badgeDetail[lane].class;\n    }\n  },\n  computed: mapState({\n    items: s => [...s.items.todo, ...s.items.inProgress, ...s.items.done]\n  })\n};\n</script>\n\n<style>\n.card {\n  margin-bottom: 10px;\n}\n\n.card:last-child {\n  margin-bottom: 25px;\n}\n\n.card-block {\n  padding: 15px;\n}\n\n.add-item {\n  margin: 30px 0;\n}\n</style>\n","<template>\n  <div class=\"card task-lane-item\">\n    <div class=\"card-block\">\n      <h5 class=\"card-title\">\n        <span class=\"text-muted\">#{{item.id}}</span>\n        {{item.text}}\n      </h5>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TaskLaneItem',\n  props: ['item'],\n};\n</script>\n\n<style>\n  .card.task-lane-item {\n    background: #627180;\n  }\n</style>\n","<template>\n  <div class=\"card\">\n    <h3 class=\"card-header\">{{title}}</h3>\n    <div class=\"card-body\">\n      <draggable v-model=\"draggables\" :options=\"{ group: 'default' }\">\n        <div v-for=\"item in items\" :key=\"item.id\">\n          <item :item=\"item\"></item>\n        </div>\n      </draggable>\n    </div>\n    <div class=\"card-footer text-muted\">\n      {{itemCount}}\n    </div>\n  </div>\n</template>\n\n<script>\nimport Draggable from 'vuedraggable';\nimport TaskLaneItem from './TaskLaneItem';\n\nexport default {\n  name: 'TaskLane',\n  props: ['items', 'title', 'id'],\n  components: {\n    item: TaskLaneItem,\n    draggable: Draggable,\n  },\n  computed: {\n    itemCount() {\n      if (!this.items) return '';\n      if (this.items.length === 1) return '1 task';\n      return `${this.items.length} tasks`;\n    },\n    draggables: {\n      get() {\n        return this.items;\n      },\n      set(items) {\n        this.$store.commit('updateItems', {\n          items,\n          id: this.id,\n        });\n      },\n    },\n  },\n};\n</script>\n\n<style>\n  .card-body > * {\n    min-height: 50px;\n  }\n</style>\n"]}